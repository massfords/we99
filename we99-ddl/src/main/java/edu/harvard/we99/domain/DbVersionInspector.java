package edu.harvard.we99.domain;

import javax.annotation.Generated;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Checks the database to see if we have our EXPERIMENTS table. We could expand
 * this over time to check for other tables, a schema version, etc.
 *
 * This is part of the Spring Context and will have its dbInitRequired value
 * set as a flag to other elements in the config to decide whether we should
 * init the db.
 *
 * @author mford
 */
public class DbVersionInspector {

    /**
     * This property is set to true if forced by an environment variable or if
     * the table doesn't exist
     */
    private boolean dbInitRequired;

    /**
     * A DataSource from the spring config so we can check to see if the table
     * exists
     * @param ds
     * @param propertyNameForce Optional system property to check that indicates
     *                          we should force the creation of the database.
     * @throws SQLException
     */
    public DbVersionInspector(DataSource ds, String propertyNameForce) throws SQLException {
        dbInitRequired  = Boolean.valueOf(System.getProperty(propertyNameForce)) || !tableExists(ds);
    }

    @Generated(value = "generated by IDE")
    public boolean isDbInitRequired() {
        return dbInitRequired;
    }

    /**
     * Use JDBC to check to see if the table exists. Note: if we move to Postgres
     * or other databases then we'll likely need to include values for the
     * schema.
     *
     * @param ds
     * @return
     * @throws SQLException
     */
    private boolean tableExists(DataSource ds) throws SQLException {
        boolean exists = false;
        try (Connection conn = ds.getConnection()) {
            ResultSet rset = conn.getMetaData().getTables(null, null, "EXPERIMENTS", null);
            if (rset.next()) {
                exists = true;
            }
        }
        return exists;
    }

}
