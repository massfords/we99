package edu.harvard.we99.domain;

import javax.annotation.Generated;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.PersistenceException;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Base class for Plate and PlateTemplates
 *
 * @author mford
 */
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public abstract class AbstractPlate<T extends AbstractPlate> extends BaseEntity {
    /**
     * Primary key field is auto generated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name provided by the user must be unique within the db
     */
    @NotNull
    @Column(unique = true)
    private String name;

    /**
     * Optional user provided description
     */
    @Column(length = 1024)
    private String description;

    /**
     * Every plate has a plate type that identifies its size, orientation, and manufacturer.
     * There may be 100's of these plate types in the system
     */
    @ManyToOne
    @NotNull @JoinColumn(updatable = false)
    private PlateType plateType;

    /**
     * A plate consists of Wells in which the compounds we want to test are placed.
     * Each well is uniquely identified by a row,col coordinate within this plate
     * so we'll store them according to their coordinate.
     */
    @OneToMany(orphanRemoval = true, cascade = CascadeType.PERSIST) @Size(min = 0)
    @MapKey(name="coordinate")
    @XmlJavaTypeAdapter(value=WellMapAdapter.class) // custom JAXB adapter to convert the map to an array an back again
    private Map<Coordinate, Well> wells = new LinkedHashMap<>();

    /**
     * Validation check that we don't have an invalid coordinate for a Well that
     * cannot exist within this plate based on its plate type.
     */
    @PrePersist
    @PreUpdate
    private void checkWells() {
        // get the max row and max col
        if (wells != null && plateType != null) {
            // note: checking for plateType != null to avoid a NPE as we're only
            // interested in validating the well coordinates here. The EntityManager
            // will handle the validation that we actually have a PlateType,
            // although after this call.
            int maxRow = 0;
            int maxCol = 0;
            for(Well well : wells.values()) {
                maxRow = Math.max(maxRow, well.getCoordinate().getRow());
                maxCol = Math.max(maxCol, well.getCoordinate().getCol());
            }

            PlateDimension maxSpecified = new PlateDimension(maxRow, maxCol);

            if (!plateType.getDim().greaterThan(maxSpecified)) {
                String message = "Coordinates for wells must be with 0x0 and %dx%d";
                String formattedErrorMessage = String.format(
                        message, plateType.getDim().getRows(), plateType.getDim().getCols());
                throw new PersistenceException(formattedErrorMessage);
            }
        }
    }

    /**
     * Convenience method for adding wells to this plate
     * @param wells
     * @return
     */
    public T withWells(Well...wells) {
        for(Well well : wells) {
            this.wells.put(well.getCoordinate(), well);
        }
        //noinspection unchecked
        return (T) this;
    }

    // All of the fluent methods here would be marked as @Generated except I had
    // to tweak them to support the generics
    public T withDescription(final String description) {
        this.description = description;
        //noinspection unchecked
        return (T) this;
    }

    public T withName(final String name) {
        this.name = name;
        //noinspection unchecked
        return (T) this;
    }

    public T withPlateType(final PlateType plateType) {
        this.plateType = plateType;
        //noinspection unchecked
        return (T) this;
    }

    public T withId(final Long id) {
        this.id = id;
        //noinspection unchecked
        return (T) this;
    }


    @Generated(value = "generated by IDE")
    public String getDescription() {
        return description;
    }

    @Generated(value = "generated by IDE")
    public void setDescription(String description) {
        this.description = description;
    }

    @Generated(value = "generated by IDE")
    public Long getId() {
        return id;
    }

    @Generated(value = "generated by IDE")
    public void setId(Long id) {
        this.id = id;
    }

    @Generated(value = "generated by IDE")
    public String getName() {
        return name;
    }

    @Generated(value = "generated by IDE")
    public void setName(String name) {
        this.name = name;
    }

    @Generated(value = "generated by IDE")
    public PlateType getPlateType() {
        return plateType;
    }

    @Generated(value = "generated by IDE")
    public void setPlateType(PlateType plateType) {
        this.plateType = plateType;
    }

    @Generated(value = "generated by IDE")
    public Map<Coordinate, Well> getWells() {
        return wells;
    }

    @Generated(value = "generated by IDE")
    public void setWells(Map<Coordinate, Well> wells) {
        this.wells = wells;
    }
}
