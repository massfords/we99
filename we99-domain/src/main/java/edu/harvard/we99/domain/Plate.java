package edu.harvard.we99.domain;

import javax.annotation.Generated;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A Plate is an instantiation of a PlateTemplate.
 *
 * @author mford
 */
@Entity
public class Plate extends AbstractPlate<Plate> {
    /**
     * Reference to the id of the PlateTemplate that this Plate was derived from.
     *
     * It's odd to have a Long here but I worry about referring back to the
     * PlateTemplate entity since it could change over time and make a previous
     * instance of a Plate inconsistent since the size might not match.
     */
    @Column(updatable = false)
    private Long derivedFrom;

    /**
     * Optional user provided barcode for the plate
     */
    private String barcode;

    /**
     * A plate consists of Wells in which the compounds we want to test are placed.
     * Each well is uniquely identified by a row,col coordinate within this plate
     * so we'll store them according to their coordinate.
     */
    @OneToMany(orphanRemoval = true, cascade = CascadeType.PERSIST) @Size(min = 0)
    @MapKey(name="coordinate")
    @XmlJavaTypeAdapter(value=WellAdapter.class) // custom JAXB adapter to convert the map to an array an back again
    private Map<Coordinate, Well> wells = new LinkedHashMap<>();

    public Plate() {}

    public Plate(String name, PlateType type) {
        setName(name);
        setPlateType(type);
    }

    @PrePersist
    @PreUpdate
    private void validate() {
        checkWells(wells.keySet());
    }

    /**
     * Convenience method for adding wells to this plate
     * @param wells
     * @return
     */
    public Plate withWells(Well...wells) {
        for(Well well : wells) {
            this.wells.put(well.getCoordinate(), well);
        }
        return this;
    }


    @Generated(value = "generated by IDE")
    public String getBarcode() {
        return barcode;
    }

    @Generated(value = "generated by IDE")
    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    @Generated(value = "generated by IDE")
    public Long getDerivedFrom() {
        return derivedFrom;
    }

    @Generated(value = "generated by IDE")
    public void setDerivedFrom(Long derivedFrom) {
        this.derivedFrom = derivedFrom;
    }

    @Generated(value = "generated by IDE")
    public Plate withDerivedFrom(final Long derivedFrom) {
        this.derivedFrom = derivedFrom;
        return this;
    }

    @Generated(value = "generated by IDE")
    public Plate withBarcode(final String barcode) {
        this.barcode = barcode;
        return this;
    }

    @Generated(value = "generated by IDE")
    public Map<Coordinate, Well> getWells() {
        return wells;
    }

    @Generated(value = "generated by IDE")
    public void setWells(Map<Coordinate, Well> wells) {
        this.wells = wells;
    }
}
