package edu.harvard.we99.domain;

import javax.annotation.Generated;
import javax.persistence.Embedded;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.validation.constraints.NotNull;

/**
 * A dose is the amount (quantity and units) of a compound placed in a well.
 * Some wells comes preloaded with doses while others are empty. Even if a well
 * is pre-loaded, doses can always be changed by the scientist as part of their
 * experiment
 *
 * @author mford
 */
public class Dose extends BaseEntity {
    /**
     * Primary key for this entity is generated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull
    @Embedded
    private Amount amount;

    /**
     * The compound that is in the well. If a Well is empty, it shouldn't have
     * a dose.
     *
     * todo - do we need some type of "unknown" compound
     */
    @ManyToOne @NotNull
    private Compound compound;

    public Dose() {}

    public Dose(Compound compound, Amount amount) {
        this.compound = compound;
        this.amount = amount;
    }

    @Generated("generated by IDE")
    public Long getId() {
        return id;
    }

    @Generated("generated by IDE")
    public Dose setId(Long id) {
        this.id = id;
        return this;
    }

    @Generated("generated by IDE")
    public Amount getAmount() {
        return amount;
    }

    @Generated("generated by IDE")
    public Dose setAmount(Amount amount) {
        this.amount = amount;
        return this;
    }

    @Generated("generated by IDE")
    public Compound getCompound() {
        return compound;
    }

    @Generated("generated by IDE")
    public Dose setCompound(Compound compound) {
        this.compound = compound;
        return this;
    }

    @Override
    @Generated(value = "generated by IDE")
    public String toString() {
        return "Dose{" +
                "amount=" + amount +
                ", compound=" + compound +
                '}';
    }

    @Override
    @Generated(value = "generated by IDE")
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Dose dose = (Dose) o;

        return compound.equals(dose.compound);

    }

    @Override
    @Generated(value = "generated by IDE")
    public int hashCode() {
        return compound.hashCode();
    }

    public Dose dilute(Double dilutionFactor) {
        return new Dose(compound, getAmount().dilute(dilutionFactor));
    }
}
