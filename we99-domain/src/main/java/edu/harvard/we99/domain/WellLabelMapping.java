package edu.harvard.we99.domain;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import java.util.ArrayList;
import java.util.List;

/**
 * Part of the plate map merge call. This object represents 1 or more wells within
 * a plate. The user can specify what to do when there are multiple wells with the
 * same contents.
 *
 * The most likely configuration is to have a small number of replicates to ensure
 * that the samples are similar (if it's the same Dose/Compound but wildly different
 * readings then there's something wrong). The remaining wells will likely represent
 * diluted versions of the original well given the dilution factor. This enables
 * the dose repsonse curve charts since we'll have multiple samples at different
 * dose levels.
 *
 * @author markford
 */
public class WellLabelMapping extends BaseEntity {
    /**
     * The label that identifies the well grouping
     */
    @NotNull
    private String label;

    /**
     * The number of wells with this same label
     */
    @NotNull
    private Integer count;

    /**
     * The type for the well
     */
    private WellType wellType;

    /**
     * The value for the primary well from which diluted wells are computed
     */
    private Dose dose;

    /**
     * Determines the factor by which all subsequent wells are diluted. For example,
     * if you configure 5 here and the first Dose is 100 then the second wells will
     * get 100/5. If there's another generation after the second then they'll get 20/5
     */
    private Double dilutionFactor;

    /**
     * The number of copies to make of the well.
     */
    private Integer replicates;

    /**
     * Note that this is transient. It's not computed on the client.
     * As a matter of convenience, this class is being used as a simple data bean
     * as well as during the processing of the merge call.
     */
    @XmlTransient
    List<Dose> doses;

    /**
     * Called during the merge processing. We'll continue to "take" values from
     * this Dose for other wells. This allows all of the logic for computing the
     * merge to be in one place.
     *
     * We initialize all of the Doses that are needed to satisfy the user's config.
     * We'll then take these Doses and put them into wells.
     *
     * @return
     */
    public Dose take() {
        if (doses == null) {
            initDoses();
        }
        if (doses.isEmpty()) {
            return null;
        }
        return doses.remove(0);
    }

    // protected for unit tests
    protected void initDoses() {
        doses = new ArrayList<>();
        Dose d = dose;
        double rep = replicates==null?0:replicates;
        for(int i=0; i<count; i++) {
            if (rep >0 && ((i%rep)==0 && i>0) || (rep == 0 && i>0)) {
                if (dilutionFactor != null) {
                    d = d.dilute(dilutionFactor);
                }
            }
            doses.add(new Dose(d.getCompound(), d.getAmount()));
        }
    }

    public void increment() {
        this.count = count + 1;
    }

    @Generated("generated by IDE")
    public String getLabel() {
        return label;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setLabel(String label) {
        this.label = label;
        return this;
    }

    @Generated("generated by IDE")
    public Integer getCount() {
        return count;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setCount(Integer count) {
        this.count = count;
        return this;
    }

    @Generated("generated by IDE")
    public WellType getWellType() {
        return wellType;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setWellType(WellType wellType) {
        this.wellType = wellType;
        return this;
    }

    @Generated("generated by IDE")
    public Dose getDose() {
        return dose;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setDose(Dose dose) {
        this.dose = dose;
        return this;
    }

    @Generated("generated by IDE")
    public Double getDilutionFactor() {
        return dilutionFactor;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setDilutionFactor(Double dilutionFactor) {
        this.dilutionFactor = dilutionFactor;
        return this;
    }

    @Generated("generated by IDE")
    public Integer getReplicates() {
        return replicates;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setReplicates(Integer replicates) {
        this.replicates = replicates;
        return this;
    }

    @Generated("generated by IDE")
    public List<Dose> getDoses() {
        return doses;
    }

    @Generated("generated by IDE")
    public WellLabelMapping setDoses(List<Dose> doses) {
        this.doses = doses;
        return this;
    }
}
