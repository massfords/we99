package edu.harvard.we99.security;

import edu.harvard.we99.domain.BaseEntity;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.Map;
import java.util.TreeMap;

/**
 * A Role is a grouping of permissions. A user has a single role and the permissions
 * within the role determine what the user is allowed to do.
 *
 * @author mford
 */
public class Role extends BaseEntity {

    private Long id;

    @NotNull
    private RoleName name;

    @SuppressWarnings("unused")
    public Role() {
    }

    public Role(RoleName roleName) {
        this.name = roleName;
    }

    @XmlJavaTypeAdapter(PermissionsAdapter.class)
    private Map<String,Permission> permissions = new TreeMap<>();

    @Generated("generated by IDE")
    public Long getId() {
        return id;
    }

    @Generated("generated by IDE")
    public Role setId(Long id) {
        this.id = id;
        return this;
    }

    @Generated("generated by IDE")
    public RoleName getName() {
        return name;
    }

    @Generated("generated by IDE")
    public Role setName(RoleName name) {
        this.name = name;
        return this;
    }

    @Generated("generated by IDE")
    public Map<String, Permission> getPermissions() {
        return permissions;
    }

    @Generated("generated by IDE")
    public Role setPermissions(Map<String, Permission> permissions) {
        this.permissions = permissions;
        return this;
    }
}
