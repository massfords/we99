package edu.harvard.we99.security;

import edu.harvard.we99.services.storage.entities.RoleEntity;
import edu.harvard.we99.services.storage.entities.UserEntity;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;

import javax.annotation.Generated;
import java.util.Collection;
import java.util.stream.Collectors;

/**
 * Subclass of Spring's User class which adds a salt field. For some unknown
 * reason, the spring class doesn't have a suitable field for us to use. It looks
 * like the default behavior there is to use the Username which isn't a good idea
 * since it's likely a known value and thus presents an easier attack vector.
 */
public class SaltyUser extends User {

    /**
     * A per-user salt value that is used by Spring Security to salt the submitted
     * password before SHA-256 encoding it and testing against the value in this
     * bean.
     */
    private final String salt;

    public SaltyUser(UserEntity u) {
        super(u.getEmail(), u.getPassword(), toGrantedAuthorities(u.getRole()));
        this.salt = u.getSalt();
    }

    private static Collection<? extends GrantedAuthority> toGrantedAuthorities(RoleEntity role) {
        // behold, the power of lambdas
        return role.getPermissions().values()
                .stream()
                .map(p -> new SimpleGrantedAuthority(p.getName()))
                .collect(Collectors.toList());
    }

    @Generated(value = "generated by IDE")
    public String getSalt() {
        return salt;
    }
}
