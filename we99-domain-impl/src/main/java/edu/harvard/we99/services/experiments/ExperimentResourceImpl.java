package edu.harvard.we99.services.experiments;

import edu.harvard.we99.domain.Experiment;
import edu.harvard.we99.domain.ExperimentStatus;
import edu.harvard.we99.domain.lists.PlateResults;
import edu.harvard.we99.services.BaseRESTServiceImpl;
import edu.harvard.we99.services.storage.ExperimentStorage;
import edu.harvard.we99.services.storage.ResultStorage;

import javax.annotation.Generated;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;

/**
 * @author mford
 */
public abstract class ExperimentResourceImpl extends BaseRESTServiceImpl<Experiment>  implements ExperimentResource {

    private Long id;
    private final ResultStorage resultStorage;
    private Experiment experiment;

    public ExperimentResourceImpl(ExperimentStorage storage,
                                  ResultStorage resultStorage) {
        super(storage);
        this.resultStorage = resultStorage;
    }

    @Override
    public Experiment get() {
        if (experiment == null) {
            experiment = super.get(id);
        }
        return experiment;
    }

    @Override
    public Experiment update(Experiment experiment) {
        return super.update(id, experiment);
    }

    @Override
    public Experiment publish() {
        Experiment experiment = get();
        if (experiment.getStatus() != ExperimentStatus.UNPUBLISHED) {
            throw new WebApplicationException(Response.status(409).build());
        }
        ExperimentStorage es = (ExperimentStorage) this.storage;
        return es.publish(experiment);
    }

    @Override
    public Response delete() {
        deleteImpl(id);
        return Response.ok().build();
    }

    @Override
    public MemberResource getMembers() {
        MemberResource mr = createMemberResource();
        mr.setId(id);
        return mr;
    }

    @Override
    public PlatesResource getPlates() {
        Experiment experiment = get();
        PlatesResource pr = createPlatesResource();
        pr.setExperiment(experiment);
        return pr;
    }

    protected abstract PlatesResource createPlatesResource();

    @Override
    public PlateResults listResults(Integer page) {
        return resultStorage.listAllByExperiment(id, page);
    }

    protected abstract MemberResource createMemberResource();


    @Generated(value = "generated by IDE")
    public Long getId() {
        return id;
    }

    @Generated(value = "generated by IDE")
    public void setId(Long id) {
        this.id = id;
    }

    @Generated("generated by IDE")
    public Experiment getExperiment() {
        return experiment;
    }
}
