package edu.harvard.we99.services.experiments;

import edu.harvard.we99.domain.*;
import edu.harvard.we99.domain.results.DoseResponseResult;
import edu.harvard.we99.services.storage.CompoundStorage;
import edu.harvard.we99.services.storage.DoseResponseResultStorage;
import edu.harvard.we99.services.storage.PlateStorage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 * @author alan orcharton
 */
public abstract class DoseResponseResourceImpl implements DoseResponseResource {

    private static final Logger log = LoggerFactory.getLogger(DoseResponseResourceImpl.class);

    private final PlateStorage plateStorage;
    private final CompoundStorage compoundStorage;
    private final DoseResponseResultStorage doseResponseResultStorage;
    private Experiment experiment;


    public DoseResponseResourceImpl(PlateStorage plateStorage, CompoundStorage compoundStorage,
                                    DoseResponseResultStorage doseResponseResultStorage){

        this.plateStorage = plateStorage;
        this.compoundStorage = compoundStorage;
        this.doseResponseResultStorage = doseResponseResultStorage;



    }


    protected abstract DoseResponseResultResource createDoseResponseResultResource();

    @Override
    public DoseResponseResult createForCompound(Compound compound, List<Plate> plates) {
        DoseResponseResult drr = new DoseResponseResult().setCompound(compound).setExperiment(experiment);
        DoseResponseResult result = doseResponseResultStorage.create(drr);
        for (Plate p : plates){
            Plate aPlate = plateStorage.get(p.getId());
            for(Well w : aPlate.getWells().values()){
                Set<Dose> doses = w.getContents();
                for(Iterator<Dose> it = doses.iterator(); it.hasNext();){
                    Dose d = it.next();
                    if(d.getCompound().equals(compound)){
                        ExperimentPoint ep = new ExperimentPoint()
                                .setAssociatedDoseResponseResult(result)
                                .setAssociatedPlate(aPlate)
                                .setAssociatedWell(w)
                                .setX(d.getAmount().getNumber());

                        doseResponseResultStorage.addExperimentPoint(result.getId(),ep);


                    }

                }
            }
        }

        return doseResponseResultStorage.get(result.getId());
    }

    @Override
    public DoseResponseResultResource getDoseResponseResults(Long doseResponseId) {
        DoseResponseResultResource drr = createDoseResponseResultResource();
        drr.setExperiment(experiment);
        drr.setDoseResponseId(doseResponseId);
        return drr;
    }

    @Override
    @Generated(value = "generated by IDE")
    public void setExperiment(Experiment experiment) {
        this.experiment = experiment;
    }


    @Override
    @Generated(value = "generated by IDE")
    public Experiment getExperiment() {
        return experiment;
    }

}
