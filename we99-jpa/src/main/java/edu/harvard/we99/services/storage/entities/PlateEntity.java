package edu.harvard.we99.services.storage.entities;

import edu.harvard.we99.domain.Coordinate;
import edu.harvard.we99.domain.PlateDimension;

import javax.annotation.Generated;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PersistenceException;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

/**
 * @author mford
 */
@Entity
@Table(name = "plates")
public class PlateEntity extends AbstractPlateEntity<PlateEntity> {
    /**
     * Reference to the id of the PlateTemplate that this Plate was derived from.
     *
     * It's odd to have a Long here but I worry about referring back to the
     * PlateTemplate entity since it could change over time and make a previous
     * instance of a Plate inconsistent since the size might not match.
     */
    @Column(updatable = false)
    private Long derivedFrom;

    /**
     * Optional user provided barcode for the plate
     */
    private String barcode;

    /**
     * A plate consists of Wells in which the compounds we want to test are placed.
     * Each well is uniquely identified by a row,col coordinate within this plate
     * so we'll store them according to their coordinate.
     */
    @OneToMany(orphanRemoval = true, cascade = CascadeType.PERSIST)
    @Size(min = 0)
    @MapKey(name="coordinate")
    private Map<Coordinate, WellEntity> wells = new LinkedHashMap<>();

    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(updatable = false)
    @NotNull
    private ExperimentEntity experiment;

    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    private Set<LabelEntity> labels = new HashSet<>();

    @OneToOne(orphanRemoval = true, optional = true)
    private PlateResultEntity results;

    /**
     * Every plate has a plate type that identifies its size, orientation, and manufacturer.
     * There may be 100's of these plate types in the system
     */
    @ManyToOne
    @NotNull
    @JoinColumn(updatable = false)
    private PlateTypeEntity plateType;

    @PrePersist
    @PreUpdate
    private void validate() {
        checkWells(wells.keySet());
    }

    /**
     * Validation check that we don't have an invalid coordinate for a Well that
     * cannot exist within this plate based on its plate type.
     */
    protected void checkWells(Set<Coordinate> coords) {
        // get the max row and max col
        if (getPlateType() != null) {
            // note: checking for plateType != null to avoid a NPE as we're only
            // interested in validating the well coordinates here. The EntityManager
            // will handle the validation that we actually have a PlateType,
            // although after this call.
            int maxRow = 0;
            int maxCol = 0;
            for(Coordinate coord : coords) {
                maxRow = Math.max(maxRow, coord.getRow());
                maxCol = Math.max(maxCol, coord.getCol());
            }

            PlateDimension maxSpecified = new PlateDimension(maxRow, maxCol);

            if (!getPlateType().getDim().greaterThan(maxSpecified)) {
                String message = "Coordinates for wells must be with 0x0 and %dx%d";
                String formattedErrorMessage = String.format(
                        message, getPlateType().getDim().getRows(), getPlateType().getDim().getCols());
                throw new PersistenceException(formattedErrorMessage);
            }
        }
    }


    @Generated(value = "generated by IDE")
    public String getBarcode() {
        return barcode;
    }

    @Generated(value = "generated by IDE")
    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    @Generated(value = "generated by IDE")
    public Long getDerivedFrom() {
        return derivedFrom;
    }

    @Generated(value = "generated by IDE")
    public void setDerivedFrom(Long derivedFrom) {
        this.derivedFrom = derivedFrom;
    }

    @Generated(value = "generated by IDE")
    public ExperimentEntity getExperiment() {
        return experiment;
    }

    @Generated(value = "generated by IDE")
    public void setExperiment(ExperimentEntity experiment) {
        this.experiment = experiment;
    }

    @Generated(value = "generated by IDE")
    public Map<Coordinate, WellEntity> getWells() {
        return wells;
    }

    @Generated(value = "generated by IDE")
    public void setWells(Map<Coordinate, WellEntity> wells) {
        this.wells = wells;
    }

    @Generated(value = "generated by IDE")
    public PlateEntity withBarcode(final String barcode) {
        this.barcode = barcode;
        return this;
    }

    @Generated(value = "generated by IDE")
    public PlateEntity withDerivedFrom(final Long derivedFrom) {
        this.derivedFrom = derivedFrom;
        return this;
    }

    @Generated(value = "generated by IDE")
    public PlateEntity withExperiment(final ExperimentEntity experiment) {
        this.experiment = experiment;
        return this;
    }

    @Generated(value = "generated by IDE")
    public PlateEntity withWells(final Map<Coordinate, WellEntity> wells) {
        this.wells = wells;
        return this;
    }

    public PlateEntity withWells(WellEntity...wells) {
        for(WellEntity we : wells) {
            this.wells.put(we.getCoordinate(), we);
        }
        return this;
    }

    @Generated(value = "generated by IDE")
    public Set<LabelEntity> getLabels() {
        return labels;
    }

    @Generated(value = "generated by IDE")
    public void setLabels(Set<LabelEntity> labels) {
        this.labels = labels;
    }

    public void addWell(WellEntity w) {
        this.wells.put(w.getCoordinate(), w);
    }

    @Generated(value = "generated by IDE")
    public PlateResultEntity getResults() {
        return results;
    }

    @Generated(value = "generated by IDE")
    public void setResults(PlateResultEntity results) {
        this.results = results;
    }

    @Generated(value = "generated by IDE")
    public PlateTypeEntity getPlateType() {
        return plateType;
    }

    @Generated(value = "generated by IDE")
    public void setPlateType(PlateTypeEntity plateType) {
        this.plateType = plateType;
    }

    @Generated(value = "generated by IDE")
    public PlateEntity withPlateType(final PlateTypeEntity plateType) {
        this.plateType = plateType;
        return this;
    }
}
