package edu.harvard.we99.services.storage.entities;


import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.NotNull;

import edu.harvard.we99.domain.CurveFitPoint;
import edu.harvard.we99.domain.ExperimentPoint;
import edu.harvard.we99.domain.FitEquation;
import edu.harvard.we99.domain.FitParameter;
import javax.xml.bind.annotation.XmlTransient;
import org.hibernate.annotations.Type;
import org.joda.time.DateTime;

import java.util.*;

/**
 * @author alan orcharton
 */

@Entity
@Table(name = "doseresponseresults")
public class DoseResponseResultEntity {

    /**
     * Primary key files is auto generated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long Id;

    /**
     * Creation time
     */
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    @Column(updatable = false)
    private DateTime created;


    /**
     * Time of the last modification (computed when the bean is saved
     */
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    private DateTime lastModified;

    /**
     * Reference to the Experiment
     */
    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(updatable = false)
    @NotNull
    private ExperimentEntity experiment;

    /**
     * Reference to the Compound that the dose response is for
     */
    @ManyToOne(fetch = FetchType.EAGER)
    @NotNull
    private CompoundEntity compound;

    @XmlTransient
    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.EAGER)
    private List<DoseEntity> doses = new ArrayList<>();

    @ElementCollection(targetClass = ExperimentPoint.class)
    @CollectionTable(name = "doseresponse_experimentpoints", joinColumns = @JoinColumn(name = "experimentpointid"))
    private List<ExperimentPoint> experimentPoints = new ArrayList<>();

    @ElementCollection(targetClass = CurveFitPoint.class)
    @CollectionTable(name = "doseresponse_curvefitpoints", joinColumns = @JoinColumn(name = "curvefitpointid"))
    private List<CurveFitPoint> curveFitPoints = new ArrayList<>();

    @ElementCollection(targetClass = FitParameter.class)
    @CollectionTable(name = "doseresponse_fitparameters", joinColumns = @JoinColumn(name = "doseresponseid"))
    private Map<String,FitParameter> fitParameterMap = new HashMap<>();

    /**
     * Optional comments from the user about this plate of its changes
     */
    private String comments;

    private FitEquation fitEquation = FitEquation.HILLEQUATION;


    public void addDose(DoseEntity we){
        doses.add(we);
    }

    public DoseResponseResultEntity withDoses(DoseEntity...doses) {
        for(DoseEntity de : doses) {
            this.doses.add(de);
        }
        return this;
    }

    /**
     * Adds a new Experiment point - results for a well
     * @param ep Entity to add the point to
     */
    public void addExperimentPoint(ExperimentPoint ep) { experimentPoints.add(ep);}

    /**
     * Adds a new Experiment point - results for a well
     * @param experimentPoints Entity to add the point to
     */
    public void withExperimentPoints(List<ExperimentPoint> experimentPoints){
        for(ExperimentPoint ep : experimentPoints) {
            this.experimentPoints.add(ep);
        }
    }


    /**
     * Adds a new curve fit point - result of curve fit
     * @param cfp The point entity to be added
     */
    public void addCurveFitPoint(CurveFitPoint cfp) {
        curveFitPoints.add(cfp);
    }

    public void withCurveFitPoints(List<CurveFitPoint> curveFitPoints){
        for(CurveFitPoint cfp : curveFitPoints){
            this.curveFitPoints.add(cfp);
        }
    }


    public void addFitParameter(FitParameter parameter) {
        fitParameterMap.put(parameter.getName(), parameter);
    }

    @Generated("generated by IDE")
    public String getComments() {
        return comments;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setComments(String comments) {
        this.comments = comments;
        return this;
    }


    @Generated("generated by IDE")
    public Long getId() {
        return Id;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setId(Long id) {
        Id = id;
        return this;
    }

    @Generated("generated by IDE")
    public DateTime getCreated() {
        return created;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setCreated(DateTime created) {
        this.created = created;
        return this;
    }

    @Generated("generated by IDE")
    public DateTime getLastModified() {
        return lastModified;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setLastModified(DateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }

    @Generated("generated by IDE")
    public CompoundEntity getCompound() {
        return compound;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setCompound(CompoundEntity compound) {
        this.compound = compound;
        return this;
    }



    @Generated("generated by IDE")
    public List<ExperimentPoint> getExperimentPoints() {
        return experimentPoints;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setExperimentPoints(List<ExperimentPoint> experimentPoints) {
        this.experimentPoints = experimentPoints;
        return this;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setExperiment(ExperimentEntity experiment) {
        this.experiment = experiment;
        return this;
    }

    @Generated("generated by IDE")
    public ExperimentEntity getExperiment() {
        return experiment;
    }



    @Generated("generated by IDE")
    public Map<String,FitParameter> getFitParameterMap() {
        return fitParameterMap;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setFitParameterMap(Map<String,FitParameter> fitParameterMap) {
        this.fitParameterMap = fitParameterMap;
        return this;
    }

    @Generated("generated by IDE")
    public FitEquation getFitEquation() {
        return fitEquation;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setFitEquation(FitEquation fitEquation) {
        this.fitEquation = fitEquation;
        return this;
    }

    @Generated("generated by IDE")
    public List<DoseEntity> getDoses() {
        return doses;
    }

    @Generated("generated by IDE")
    public void setDoses(List<DoseEntity> doses) {
        this.doses = doses;
    }


    @Generated("generated by IDE")
    public List<CurveFitPoint> getCurveFitPoints() {
        return curveFitPoints;
    }

    @Generated("generated by IDE")
    public DoseResponseResultEntity setCurveFitPoints(List<CurveFitPoint> curveFitPoints) {
        this.curveFitPoints = curveFitPoints;
        return this;
    }
}
