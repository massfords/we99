package edu.harvard.we99.services.storage.entities;

import org.hibernate.validator.constraints.Email;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * @author mford
 */
@Entity
@Table(name = "users")
public class UserEntity {
    public enum PasswordStatus {assigned, temporary}

    /**
     * Primary key is generated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * We'll use the user's email for communication and their login
     */
    @NotNull
    @Email
    @Column(unique = true)
    private String email;

    /**
     * User's first name
     */
    @NotNull
    private String firstName;

    /**
     * User's last name
     */
    @NotNull
    private String lastName;

    /**
     * User's password. The db will store a SHA-256 salted and hashed password.
     * There's no point in exposing this value to the end user so it's marked
     * as XmlTransient so it doesn't appear in the UI
     */
    @NotNull
    private String password;

    /**
     * Unique salt value for each user. This is stored along with their record
     * and is generated at the time of their creation.
     */
    @NotNull
    private String salt;

    @ManyToOne(fetch = FetchType.EAGER)
    @NotNull
    private RoleEntity role;

    @ManyToMany(fetch = FetchType.EAGER)
    @MapKey(name="id")
    private Map<Long, ExperimentEntity> experiments = new HashMap<>();

    @NotNull
    private PasswordStatus passwordStatus = PasswordStatus.temporary;

    public UserEntity() {}

    public UserEntity(String email, String firstName, String lastName) {
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.password = UUID.randomUUID().toString();
    }

    @PrePersist
    private void beforeInsert() {
        salt = UUID.randomUUID().toString();
    }

    public void addExperiment(ExperimentEntity experiment) {
        this.experiments.put(experiment.getId(), experiment);
    }
    public void removeExperiment(ExperimentEntity experiment) {
        this.experiments.remove(experiment.getId());
    }

    @Generated(value = "generated by IDE")
    public String getEmail() {
        return email;
    }

    @Generated(value = "generated by IDE")
    public void setEmail(String email) {
        this.email = email;
    }

    @Generated(value = "generated by IDE")
    public Map<Long, ExperimentEntity> getExperiments() {
        return experiments;
    }

    @Generated(value = "generated by IDE")
    public void setExperiments(Map<Long, ExperimentEntity> experiments) {
        this.experiments = experiments;
    }

    @Generated(value = "generated by IDE")
    public String getFirstName() {
        return firstName;
    }

    @Generated(value = "generated by IDE")
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Generated(value = "generated by IDE")
    public Long getId() {
        return id;
    }

    @Generated(value = "generated by IDE")
    public void setId(Long id) {
        this.id = id;
    }

    @Generated(value = "generated by IDE")
    public String getLastName() {
        return lastName;
    }

    @Generated(value = "generated by IDE")
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Generated(value = "generated by IDE")
    public String getPassword() {
        return password;
    }

    @Generated(value = "generated by IDE")
    public void setPassword(String password) {
        this.password = password;
    }

    @Generated(value = "generated by IDE")
    public PasswordStatus getPasswordStatus() {
        return passwordStatus;
    }

    @Generated(value = "generated by IDE")
    public void setPasswordStatus(PasswordStatus passwordStatus) {
        this.passwordStatus = passwordStatus;
    }

    @Generated(value = "generated by IDE")
    public RoleEntity getRole() {
        return role;
    }

    @Generated(value = "generated by IDE")
    public void setRole(RoleEntity role) {
        this.role = role;
    }

    @Generated(value = "generated by IDE")
    public String getSalt() {
        return salt;
    }

    @Generated(value = "generated by IDE")
    public void setSalt(String salt) {
        this.salt = salt;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withEmail(final String email) {
        this.email = email;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withId(final Long id) {
        this.id = id;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withFirstName(final String firstName) {
        this.firstName = firstName;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withLastName(final String lastName) {
        this.lastName = lastName;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withPassword(final String password) {
        this.password = password;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withSalt(final String salt) {
        this.salt = salt;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withRole(final RoleEntity role) {
        this.role = role;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withExperiments(final Map<Long, ExperimentEntity> experiments) {
        this.experiments = experiments;
        return this;
    }

    @Generated(value = "generated by IDE")
    public UserEntity withPasswordStatus(final PasswordStatus passwordStatus) {
        this.passwordStatus = passwordStatus;
        return this;
    }
}
