package edu.harvard.we99.domain;

import edu.harvard.we99.services.storage.entities.VersionEntity;
import org.apache.commons.codec.digest.DigestUtils;

import javax.annotation.Generated;
import javax.sql.DataSource;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Checks the database to see if there's a version entry that matches the exact
 * db version from our DDL
 *
 * This is part of the Spring Context and will have its dbInitRequired value
 * set as a flag to other elements in the config to decide whether we should
 * init the db.
 *
 * @author mford
 */
public class DbVersionInspector {

    /**
     * This property is set to true if forced by an environment variable or if
     * the table doesn't exist
     */
    private boolean dbInitRequired;

    /**
     * A DataSource from the spring config so we can check to see if the table
     * exists
     * @param ds
     * @param propertyNameForce Optional system property to check that indicates
     *                          we should force the creation of the database.
     * @throws SQLException
     */
    public DbVersionInspector(DataSource ds, String propertyNameForce) throws Exception {
        String forceProperty = System.getProperty(propertyNameForce);
        dbInitRequired  = Boolean.valueOf(forceProperty) || !dbCurrent(ds);
    }

    @Generated(value = "generated by IDE")
    public boolean isDbInitRequired() {
        return dbInitRequired;
    }

    /**
     * Use JDBC to check to see if the db version is current
     *
     * @param ds
     * @return
     * @throws SQLException
     */
    private boolean dbCurrent(DataSource ds) throws Exception {
        boolean versionIsCurrent = false;
        try (Connection conn = ds.getConnection();
             PreparedStatement ps = conn.prepareStatement("select version from versionInfo where name=?")) {
            ps.setString(1, VersionEntity.Names.DATABASE.name());
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String version = rs.getString(1);
                    versionIsCurrent = version.equals(hashedDDL());
                }
            }
        } catch(Exception e) {
            versionIsCurrent = false;
        }
        return versionIsCurrent;
    }

    protected static String hashedDDL() throws Exception {
        try (InputStream is = DbVersionInspector.class.getResourceAsStream("/we99.ddl")) {
            return DigestUtils.md5Hex(is);
        }
    }
}
